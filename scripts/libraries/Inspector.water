library filesystem
library list
library math
library string



module inspector.csharp

	function inspect-solution path
		foreach folder in (folder.get-folders path)
			var directoryInfo (new (typeof System.IO.DirectoryInfo) folder)
			var project-path "${directoryInfo.FullName}\\${directoryInfo.Name}.csproj"
			if(file.exists project-path)
				inspector.csharp.inspect-project project-path
			end_if
		end_foreach
	end_function

	function inspect-project project-path
		print "Inspecting ${(file.get-name project-path)}"
		var project (visual-studio.csproj2005.read project-path)
		var path (file.get-folder project-path)
		var root-path (file.get-folder path)

		var files (inspector.csharp.get-project-files path "")
		var project-files (inspector.csharp.get-project-files-from-project project)

		; Find files not in a project.
		var added-files (list.difference files project-files)
		if(> added-files.Count 0)
			foreach file in added-files
				var projectItem (new (typeof Bamboo.VisualStudio.VisualStudio2005.CSharpProject.Models.Item Bamboo.VisualStudio))
				= projectItem.Include file
				= projectItem.SubType "Code"
				= projectItem.Type "Compile"
				project.Items.Add projectItem
				print "ADDED ${file}"
			end_foreach

			var writer (file.create-text project-path)
			visual-studio.csproj2005.write project writer
			writer.Flush
			writer.Close
		end_if

		; Find missing files.
		var was-removed false
		foreach file in project-files
			if(! (file.exists "${root-path}${file}"))
				foreach projectItem in project.Items
					if(== projectItem.Include file)
						project.Items.Remove projectItem
						break
					end_if
				end_foreach
				= was-removed true
				print "REMOVED ${file}"
			end_if
		end_foreach
		if was-removed
			var writer (file.create-text project-path)
			visual-studio.csproj2005.write project writer
			writer.Flush
			writer.Close
		end_if

		; Inspect each item.
		foreach item in project.Items
			var filename "${path}${item.Include}"
			if(not (file.exists filename))
				throw "File does not exist: ${item.Include}"
			end_if
			if(filename.EndsWith "AssemblyInfo.cs")
				if(not (inspector.csharp.inspect-assemblyinfo filename))
					throw "AssemblyInfo does not contain a copyright: ${filename}"
				end_if
			else_if(and (filename.EndsWith ".cs") (not (filename.EndsWith ".Designer.cs")))
				if(and (not (inspector.csharp.inspect-copyright filename)) (not (inspector.csharp.inspect-autogenerated filename)))
					throw "${item.Include} does not contain a copyright: ${filename}"
				end_if

				var expected-namespace project.Name
				var index (item.Include.LastIndexOf "\\")
				if(> index -1)
					var extension (item.Include.Substring 0 index)
					= extension (extension.Replace "\\" ".")
					= expected-namespace "${expected-namespace}.${extension}"
				end_if
				if(not (inspector.csharp.inspect-namespace filename expected-namespace))
					throw "${item.Include} has an invalid namespace: ${filename}"
				end_if
			end_if
		end_foreach
	end_function

	function get-project-files-from-project project
		var files '()
		foreach item in project.Items
			files.Add item.Include
		end_foreach
		return files
	end_function

	function get-project-files path relpath
		var files '()
		inspector.csharp.get-project-folders path relpath files
		return files
	end_function

	function get-project-folders path relpath files
		foreach folder in (folder.get-folders path)
			inspector.csharp.get-project-folder folder relpath files
		end_foreach
		foreach file in (folder.get-files path)
			inspector.csharp.get-project-file file relpath files
		end_foreach
	end_function

	function get-project-folder folder relpath files
		var name (folder.get-name folder)
		if(and (and (!= ".svn" name) (!= "bin" name)) (!= "obj" name))
			inspector.csharp.get-project-folders folder "${relpath}${name}\\" files
		end_if
	end_function

	function get-project-file file relpath files
		if(== "cs" (file.get-extension file))
			var name (file.get-name file)
			if(!= "AssemblyInfo.cs" name)
				files.Add "${relpath}${name}"
			end_if
		end_if
	end_function

	function inspect-assemblyinfo filename
		var match (inspector.csharp._match filename (regex "AssemblyCopyright(\"\")"))
		return (not match.Success)
	end_function

	function inspect-copyright filename
		var match (inspector.csharp._match filename (regex "Copyright"))
		return match.Success
	end_function

	function inspect-autogenerated filename
		var match (inspector.csharp._match filename (regex "AUTOGENERATED"))
		return match.Success
	end_function

	function inspect-namespace filename expected-namespace
		var matches (inspector.csharp._matches filename (regex "namespace (?<namespace>[^\r\n]*)(\r)?"))
		if(> matches.Count 0)
			if(equals matches[0].Groups["namespace"].Value expected-namespace)
				return true
			else
				return false
			end_if
		else
			return false
		end_if
	end_function

	function _match path rx
		var reader (file.open-text path)
		var text (reader.ReadToEnd)
		reader.Close
		return (rx.Match text)
	end_function

	function _matches path rx
		var reader (file.open-text path)
		var text (reader.ReadToEnd)
		reader.Close
		return (rx.Matches text)
	end_function

end_module
