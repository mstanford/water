//
// AUTOGENERATED 2/26/2009 12:33:14 PM
//
using System;

namespace Bamboo.Css
{
	public class CssParser
	{
		private CssTokenizer _tokenizer = new CssTokenizer();
		private CssTextReader _reader;
		private CssToken _token;

		public CssParser(CssTextReader reader)
		{
			this._reader = reader;
			this._token = this._tokenizer.Tokenize(this._reader);
		}

		public CssNode Parse()
		{
			return ParseRuleList();
		}

		private CssNode ParseDeclaration()
		{
			CssNode node = new CssNode(CssNodeType.Declaration);

			switch (this._token.Type)
			{
				case CssTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseCOLON());
						node.Nodes.Add(ParseValueList());
						node.Nodes.Add(ParseSEMICOLON());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private CssNode ParseDeclarationList()
		{
			CssNode node = new CssNode(CssNodeType.DeclarationList);

			switch (this._token.Type)
			{
				case CssTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseDeclaration());
						node.Nodes.Add(ParseDeclarationList());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private CssNode ParseRule()
		{
			CssNode node = new CssNode(CssNodeType.Rule);

			switch (this._token.Type)
			{
				case CssTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseSelector());
						node.Nodes.Add(ParseLEFT_CURLY_BRACE());
						node.Nodes.Add(ParseDeclarationList());
						node.Nodes.Add(ParseRIGHT_CURLY_BRACE());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private CssNode ParseRuleList()
		{
			CssNode node = new CssNode(CssNodeType.RuleList);

			switch (this._token.Type)
			{
				case CssTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseRule());
						node.Nodes.Add(ParseRuleList());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private CssNode ParseSelector()
		{
			CssNode node = new CssNode(CssNodeType.Selector);

			switch (this._token.Type)
			{
				case CssTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseSelectorTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private CssNode ParseSelectorTail()
		{
			CssNode node = new CssNode(CssNodeType.SelectorTail);

			switch (this._token.Type)
			{
				case CssTokenType.LEFT_BRACKET:
					{
						node.Nodes.Add(ParseLEFT_BRACKET());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseEQUALS());
						node.Nodes.Add(ParseSTRING());
						node.Nodes.Add(ParseRIGHT_BRACKET());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private CssNode ParseValue()
		{
			CssNode node = new CssNode(CssNodeType.Value);

			switch (this._token.Type)
			{
				case CssTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						return node;
					}
				case CssTokenType.STRING:
					{
						node.Nodes.Add(ParseSTRING());
						return node;
					}
				case CssTokenType.INTEGER:
					{
						node.Nodes.Add(ParseINTEGER());
						return node;
					}
				case CssTokenType.FLOAT:
					{
						node.Nodes.Add(ParseFLOAT());
						return node;
					}
				case CssTokenType.BOOLEAN:
					{
						node.Nodes.Add(ParseBOOLEAN());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private CssNode ParseValueList()
		{
			CssNode node = new CssNode(CssNodeType.ValueList);

			switch (this._token.Type)
			{
				case CssTokenType.BOOLEAN:
				case CssTokenType.FLOAT:
				case CssTokenType.IDENTIFIER:
				case CssTokenType.INTEGER:
				case CssTokenType.STRING:
					{
						node.Nodes.Add(ParseValue());
						node.Nodes.Add(ParseValueList());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private CssNode ParseBOOLEAN()
		{
			CssNode node = new CssNode(CssNodeType.BOOLEAN, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseCOLON()
		{
			CssNode node = new CssNode(CssNodeType.COLON, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseEQUALS()
		{
			CssNode node = new CssNode(CssNodeType.EQUALS, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseFLOAT()
		{
			CssNode node = new CssNode(CssNodeType.FLOAT, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseIDENTIFIER()
		{
			CssNode node = new CssNode(CssNodeType.IDENTIFIER, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseINTEGER()
		{
			CssNode node = new CssNode(CssNodeType.INTEGER, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseLEFT_BRACKET()
		{
			CssNode node = new CssNode(CssNodeType.LEFT_BRACKET, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseLEFT_CURLY_BRACE()
		{
			CssNode node = new CssNode(CssNodeType.LEFT_CURLY_BRACE, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseRIGHT_BRACKET()
		{
			CssNode node = new CssNode(CssNodeType.RIGHT_BRACKET, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseRIGHT_CURLY_BRACE()
		{
			CssNode node = new CssNode(CssNodeType.RIGHT_CURLY_BRACE, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseSEMICOLON()
		{
			CssNode node = new CssNode(CssNodeType.SEMICOLON, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CssNode ParseSTRING()
		{
			CssNode node = new CssNode(CssNodeType.STRING, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

	}
}
