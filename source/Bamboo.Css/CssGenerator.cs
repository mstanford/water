//
// AUTOGENERATED 2/26/2009 12:33:15 PM
//
using System;

namespace Bamboo.Css
{
	public class CssGenerator
	{

		public CssGenerator()
		{
		}

		public void Generate(CssNode node, System.IO.TextWriter writer)
		{
			bool writeWhitespace = false;

			Generate(node, writer, ref writeWhitespace);
		}

		private void Generate(CssNode node, System.IO.TextWriter writer, ref bool writeWhitespace)
		{
			switch(node.Type)
			{
				case CssNodeType.Declaration:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CssNodeType.DeclarationList:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CssNodeType.Rule:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CssNodeType.RuleList:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CssNodeType.Selector:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CssNodeType.SelectorTail:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CssNodeType.Value:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CssNodeType.ValueList:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CssNodeType.BOOLEAN:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.COLON:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.EPSILON:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.EQUALS:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.FLOAT:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.IDENTIFIER:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.INTEGER:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.LEFT_BRACKET:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.LEFT_CURLY_BRACE:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.RIGHT_BRACKET:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.RIGHT_CURLY_BRACE:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.SEMICOLON:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CssNodeType.STRING:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				default:
					{
						throw new System.Exception("Invalid node type.");
					}
			}
		}

	}
}
