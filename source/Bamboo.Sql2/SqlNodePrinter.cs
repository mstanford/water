//
// AUTOGENERATED 7/19/2009 5:57:00 PM
//
using System;

namespace Bamboo.Sql2
{
	public class SqlNodePrinter
	{

		public static void Print(SqlNode node, System.IO.TextWriter writer)
		{
			Print(node, writer, 0);
		}

		private static void Print(SqlNode node, System.IO.TextWriter writer, int indentationLevel)
		{
			switch(node.Type)
			{
				case SqlNodeType.AscDesc :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("AscDesc:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.ColumnList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ColumnList:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.ColumnListTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ColumnListTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.ComparisonOperator :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ComparisonOperator:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.From :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("From:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.FunctionParameterList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("FunctionParameterList:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.FunctionParameterListTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("FunctionParameterListTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.GroupByClause :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("GroupByClause:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.GroupByTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("GroupByTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.JoinList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("JoinList:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.LogicalOperator :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LogicalOperator:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.OrderByClause :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("OrderByClause:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.OrderByTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("OrderByTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.Predicate :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Predicate:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.PredicateIdentifierTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("PredicateIdentifierTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.PredicateTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("PredicateTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.Select :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Select:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.SelectItem :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SelectItem:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.SelectItemAlias :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SelectItemAlias:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.SelectItemTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SelectItemTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.SelectList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SelectList:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.SelectListTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SelectListTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.SetList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SetList:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.SetListTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SetListTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.Statement :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Statement:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.StatementTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("StatementTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.TableList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("TableList:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.TableListTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("TableListTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.TableTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("TableTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.Union :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Union:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.VALUE :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("VALUE:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.ValueList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ValueList:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.ValueListTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ValueListTail:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.WhereClause :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("WhereClause:");
						foreach(SqlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case SqlNodeType.AND :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("AND: " + node.Value);
						break;
					}
				case SqlNodeType.AS :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("AS: " + node.Value);
						break;
					}
				case SqlNodeType.ASC :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ASC: " + node.Value);
						break;
					}
				case SqlNodeType.BETWEEN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("BETWEEN: " + node.Value);
						break;
					}
				case SqlNodeType.BY :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("BY: " + node.Value);
						break;
					}
				case SqlNodeType.COMMA :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("COMMA: " + node.Value);
						break;
					}
				case SqlNodeType.DATE :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("DATE: " + node.Value);
						break;
					}
				case SqlNodeType.DELETE :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("DELETE: " + node.Value);
						break;
					}
				case SqlNodeType.DESC :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("DESC: " + node.Value);
						break;
					}
				case SqlNodeType.EPSILON :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("EPSILON: " + node.Value);
						break;
					}
				case SqlNodeType.EQUALS :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("EQUALS: " + node.Value);
						break;
					}
				case SqlNodeType.FLOAT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("FLOAT: " + node.Value);
						break;
					}
				case SqlNodeType.FROM :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("FROM: " + node.Value);
						break;
					}
				case SqlNodeType.GREATER_THAN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("GREATER_THAN: " + node.Value);
						break;
					}
				case SqlNodeType.GREATER_THAN_OR_EQUAL :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("GREATER_THAN_OR_EQUAL: " + node.Value);
						break;
					}
				case SqlNodeType.GROUP :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("GROUP: " + node.Value);
						break;
					}
				case SqlNodeType.IDENTIFIER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("IDENTIFIER: " + node.Value);
						break;
					}
				case SqlNodeType.INNER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("INNER: " + node.Value);
						break;
					}
				case SqlNodeType.INSERT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("INSERT: " + node.Value);
						break;
					}
				case SqlNodeType.INTEGER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("INTEGER: " + node.Value);
						break;
					}
				case SqlNodeType.INTO :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("INTO: " + node.Value);
						break;
					}
				case SqlNodeType.JOIN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("JOIN: " + node.Value);
						break;
					}
				case SqlNodeType.LEFT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LEFT: " + node.Value);
						break;
					}
				case SqlNodeType.LEFT_PAREN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LEFT_PAREN: " + node.Value);
						break;
					}
				case SqlNodeType.LESS_THAN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LESS_THAN: " + node.Value);
						break;
					}
				case SqlNodeType.LESS_THAN_OR_EQUAL :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LESS_THAN_OR_EQUAL: " + node.Value);
						break;
					}
				case SqlNodeType.LIKE :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LIKE: " + node.Value);
						break;
					}
				case SqlNodeType.NOT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("NOT: " + node.Value);
						break;
					}
				case SqlNodeType.NOT_EQUALS :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("NOT_EQUALS: " + node.Value);
						break;
					}
				case SqlNodeType.ON :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ON: " + node.Value);
						break;
					}
				case SqlNodeType.OR :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("OR: " + node.Value);
						break;
					}
				case SqlNodeType.ORDER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ORDER: " + node.Value);
						break;
					}
				case SqlNodeType.OUTER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("OUTER: " + node.Value);
						break;
					}
				case SqlNodeType.QUOTED_STRING :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("QUOTED_STRING: " + node.Value);
						break;
					}
				case SqlNodeType.REPLACE :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("REPLACE: " + node.Value);
						break;
					}
				case SqlNodeType.RIGHT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("RIGHT: " + node.Value);
						break;
					}
				case SqlNodeType.RIGHT_PAREN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("RIGHT_PAREN: " + node.Value);
						break;
					}
				case SqlNodeType.SELECT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SELECT: " + node.Value);
						break;
					}
				case SqlNodeType.SEMICOLON :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SEMICOLON: " + node.Value);
						break;
					}
				case SqlNodeType.SET :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("SET: " + node.Value);
						break;
					}
				case SqlNodeType.UNION :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("UNION: " + node.Value);
						break;
					}
				case SqlNodeType.UPDATE :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("UPDATE: " + node.Value);
						break;
					}
				case SqlNodeType.VALUES :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("VALUES: " + node.Value);
						break;
					}
				case SqlNodeType.WHERE :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("WHERE: " + node.Value);
						break;
					}
				default:
					{
						throw new System.Exception("Invalid node type.");
					}
			}
		}

		private SqlNodePrinter()
		{
		}

	}
}
