//
// AUTOGENERATED 7/19/2009 5:57:00 PM
//
using System;

namespace Bamboo.Sql2
{
	public abstract class SqlEvaluator
	{

		public SqlEvaluator()
		{
		}

		public object Evaluate(SqlNode node)
		{
			switch (node.Type)
			{
				case SqlNodeType.AscDesc:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.ASC)
						{
							return EvaluateASC(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.DESC)
						{
							return EvaluateDESC(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.ColumnList:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.IDENTIFIER && node.Nodes[1].Type == SqlNodeType.ColumnListTail)
						{
							return EvaluateIDENTIFIERColumnListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.ColumnListTail:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.COMMA && node.Nodes[1].Type == SqlNodeType.IDENTIFIER && node.Nodes[2].Type == SqlNodeType.ColumnListTail)
						{
							return EvaluateCOMMAIDENTIFIERColumnListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.ComparisonOperator:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.EQUALS)
						{
							return EvaluateEQUALS(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.GREATER_THAN)
						{
							return EvaluateGREATER_THAN(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.GREATER_THAN_OR_EQUAL)
						{
							return EvaluateGREATER_THAN_OR_EQUAL(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.LESS_THAN)
						{
							return EvaluateLESS_THAN(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.LESS_THAN_OR_EQUAL)
						{
							return EvaluateLESS_THAN_OR_EQUAL(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.NOT_EQUALS)
						{
							return EvaluateNOT_EQUALS(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.LIKE)
						{
							return EvaluateLIKE(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.From:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.FROM && node.Nodes[1].Type == SqlNodeType.TableList)
						{
							return EvaluateFROMTableList(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.FunctionParameterList:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.VALUE && node.Nodes[1].Type == SqlNodeType.FunctionParameterListTail)
						{
							return EvaluateVALUEFunctionParameterListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.FunctionParameterListTail:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.COMMA && node.Nodes[1].Type == SqlNodeType.VALUE && node.Nodes[2].Type == SqlNodeType.FunctionParameterListTail)
						{
							return EvaluateCOMMAVALUEFunctionParameterListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.GroupByClause:
					{
						if(node.Nodes.Count == 4 && node.Nodes[0].Type == SqlNodeType.GROUP && node.Nodes[1].Type == SqlNodeType.BY && node.Nodes[2].Type == SqlNodeType.IDENTIFIER && node.Nodes[3].Type == SqlNodeType.GroupByTail)
						{
							return EvaluateGROUPBYIDENTIFIERGroupByTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.GroupByTail:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.COMMA && node.Nodes[1].Type == SqlNodeType.IDENTIFIER && node.Nodes[2].Type == SqlNodeType.GroupByTail)
						{
							return EvaluateCOMMAIDENTIFIERGroupByTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.JoinList:
					{
						if(node.Nodes.Count == 9 && node.Nodes[0].Type == SqlNodeType.INNER && node.Nodes[1].Type == SqlNodeType.JOIN && node.Nodes[2].Type == SqlNodeType.IDENTIFIER && node.Nodes[3].Type == SqlNodeType.TableTail && node.Nodes[4].Type == SqlNodeType.ON && node.Nodes[5].Type == SqlNodeType.IDENTIFIER && node.Nodes[6].Type == SqlNodeType.ComparisonOperator && node.Nodes[7].Type == SqlNodeType.IDENTIFIER && node.Nodes[8].Type == SqlNodeType.JoinList)
						{
							return EvaluateINNERJOINIDENTIFIERTableTailONIDENTIFIERComparisonOperatorIDENTIFIERJoinList(node);
						}
						if(node.Nodes.Count == 10 && node.Nodes[0].Type == SqlNodeType.LEFT && node.Nodes[1].Type == SqlNodeType.OUTER && node.Nodes[2].Type == SqlNodeType.JOIN && node.Nodes[3].Type == SqlNodeType.IDENTIFIER && node.Nodes[4].Type == SqlNodeType.TableTail && node.Nodes[5].Type == SqlNodeType.ON && node.Nodes[6].Type == SqlNodeType.IDENTIFIER && node.Nodes[7].Type == SqlNodeType.ComparisonOperator && node.Nodes[8].Type == SqlNodeType.IDENTIFIER && node.Nodes[9].Type == SqlNodeType.JoinList)
						{
							return EvaluateLEFTOUTERJOINIDENTIFIERTableTailONIDENTIFIERComparisonOperatorIDENTIFIERJoinList(node);
						}
						if(node.Nodes.Count == 10 && node.Nodes[0].Type == SqlNodeType.RIGHT && node.Nodes[1].Type == SqlNodeType.OUTER && node.Nodes[2].Type == SqlNodeType.JOIN && node.Nodes[3].Type == SqlNodeType.IDENTIFIER && node.Nodes[4].Type == SqlNodeType.TableTail && node.Nodes[5].Type == SqlNodeType.ON && node.Nodes[6].Type == SqlNodeType.IDENTIFIER && node.Nodes[7].Type == SqlNodeType.ComparisonOperator && node.Nodes[8].Type == SqlNodeType.IDENTIFIER && node.Nodes[9].Type == SqlNodeType.JoinList)
						{
							return EvaluateRIGHTOUTERJOINIDENTIFIERTableTailONIDENTIFIERComparisonOperatorIDENTIFIERJoinList(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.LogicalOperator:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.AND)
						{
							return EvaluateAND(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.OR)
						{
							return EvaluateOR(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.NOT)
						{
							return EvaluateNOT(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.OrderByClause:
					{
						if(node.Nodes.Count == 5 && node.Nodes[0].Type == SqlNodeType.ORDER && node.Nodes[1].Type == SqlNodeType.BY && node.Nodes[2].Type == SqlNodeType.IDENTIFIER && node.Nodes[3].Type == SqlNodeType.AscDesc && node.Nodes[4].Type == SqlNodeType.OrderByTail)
						{
							return EvaluateORDERBYIDENTIFIERAscDescOrderByTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.OrderByTail:
					{
						if(node.Nodes.Count == 4 && node.Nodes[0].Type == SqlNodeType.COMMA && node.Nodes[1].Type == SqlNodeType.IDENTIFIER && node.Nodes[2].Type == SqlNodeType.AscDesc && node.Nodes[3].Type == SqlNodeType.OrderByTail)
						{
							return EvaluateCOMMAIDENTIFIERAscDescOrderByTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.Predicate:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.IDENTIFIER && node.Nodes[1].Type == SqlNodeType.PredicateIdentifierTail)
						{
							return EvaluateIDENTIFIERPredicateIdentifierTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.PredicateIdentifierTail:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.ComparisonOperator && node.Nodes[1].Type == SqlNodeType.VALUE && node.Nodes[2].Type == SqlNodeType.PredicateTail)
						{
							return EvaluateComparisonOperatorVALUEPredicateTail(node);
						}
						if(node.Nodes.Count == 5 && node.Nodes[0].Type == SqlNodeType.BETWEEN && node.Nodes[1].Type == SqlNodeType.VALUE && node.Nodes[2].Type == SqlNodeType.AND && node.Nodes[3].Type == SqlNodeType.VALUE && node.Nodes[4].Type == SqlNodeType.PredicateTail)
						{
							return EvaluateBETWEENVALUEANDVALUEPredicateTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.PredicateTail:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.LogicalOperator && node.Nodes[1].Type == SqlNodeType.Predicate)
						{
							return EvaluateLogicalOperatorPredicate(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.Select:
					{
						if(node.Nodes.Count == 7 && node.Nodes[0].Type == SqlNodeType.SELECT && node.Nodes[1].Type == SqlNodeType.SelectList && node.Nodes[2].Type == SqlNodeType.From && node.Nodes[3].Type == SqlNodeType.JoinList && node.Nodes[4].Type == SqlNodeType.WhereClause && node.Nodes[5].Type == SqlNodeType.GroupByClause && node.Nodes[6].Type == SqlNodeType.OrderByClause)
						{
							return EvaluateSELECTSelectListFromJoinListWhereClauseGroupByClauseOrderByClause(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.SelectItem:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.IDENTIFIER && node.Nodes[1].Type == SqlNodeType.SelectItemTail && node.Nodes[2].Type == SqlNodeType.SelectItemAlias)
						{
							return EvaluateIDENTIFIERSelectItemTailSelectItemAlias(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.SelectItemAlias:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.AS && node.Nodes[1].Type == SqlNodeType.IDENTIFIER)
						{
							return EvaluateASIDENTIFIER(node);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.IDENTIFIER)
						{
							return EvaluateIDENTIFIER(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.SelectItemTail:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.LEFT_PAREN && node.Nodes[1].Type == SqlNodeType.FunctionParameterList && node.Nodes[2].Type == SqlNodeType.RIGHT_PAREN)
						{
							return EvaluateLEFT_PARENFunctionParameterListRIGHT_PAREN(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.SelectList:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.SelectItem && node.Nodes[1].Type == SqlNodeType.SelectListTail)
						{
							return EvaluateSelectItemSelectListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.SelectListTail:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.COMMA && node.Nodes[1].Type == SqlNodeType.SelectItem && node.Nodes[2].Type == SqlNodeType.SelectListTail)
						{
							return EvaluateCOMMASelectItemSelectListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.SetList:
					{
						if(node.Nodes.Count == 4 && node.Nodes[0].Type == SqlNodeType.IDENTIFIER && node.Nodes[1].Type == SqlNodeType.ComparisonOperator && node.Nodes[2].Type == SqlNodeType.VALUE && node.Nodes[3].Type == SqlNodeType.SetListTail)
						{
							return EvaluateIDENTIFIERComparisonOperatorVALUESetListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.SetListTail:
					{
						if(node.Nodes.Count == 5 && node.Nodes[0].Type == SqlNodeType.COMMA && node.Nodes[1].Type == SqlNodeType.IDENTIFIER && node.Nodes[2].Type == SqlNodeType.ComparisonOperator && node.Nodes[3].Type == SqlNodeType.VALUE && node.Nodes[4].Type == SqlNodeType.SetListTail)
						{
							return EvaluateCOMMAIDENTIFIERComparisonOperatorVALUESetListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.Statement:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.Select && node.Nodes[1].Type == SqlNodeType.Union && node.Nodes[2].Type == SqlNodeType.StatementTail)
						{
							return EvaluateSelectUnionStatementTail(node);
						}
						if(node.Nodes.Count == 5 && node.Nodes[0].Type == SqlNodeType.DELETE && node.Nodes[1].Type == SqlNodeType.FROM && node.Nodes[2].Type == SqlNodeType.IDENTIFIER && node.Nodes[3].Type == SqlNodeType.WhereClause && node.Nodes[4].Type == SqlNodeType.StatementTail)
						{
							return EvaluateDELETEFROMIDENTIFIERWhereClauseStatementTail(node);
						}
						if(node.Nodes.Count == 11 && node.Nodes[0].Type == SqlNodeType.INSERT && node.Nodes[1].Type == SqlNodeType.INTO && node.Nodes[2].Type == SqlNodeType.IDENTIFIER && node.Nodes[3].Type == SqlNodeType.LEFT_PAREN && node.Nodes[4].Type == SqlNodeType.ColumnList && node.Nodes[5].Type == SqlNodeType.RIGHT_PAREN && node.Nodes[6].Type == SqlNodeType.VALUES && node.Nodes[7].Type == SqlNodeType.LEFT_PAREN && node.Nodes[8].Type == SqlNodeType.ValueList && node.Nodes[9].Type == SqlNodeType.RIGHT_PAREN && node.Nodes[10].Type == SqlNodeType.StatementTail)
						{
							return EvaluateINSERTINTOIDENTIFIERLEFT_PARENColumnListRIGHT_PARENVALUESLEFT_PARENValueListRIGHT_PARENStatementTail(node);
						}
						if(node.Nodes.Count == 11 && node.Nodes[0].Type == SqlNodeType.REPLACE && node.Nodes[1].Type == SqlNodeType.INTO && node.Nodes[2].Type == SqlNodeType.IDENTIFIER && node.Nodes[3].Type == SqlNodeType.LEFT_PAREN && node.Nodes[4].Type == SqlNodeType.ColumnList && node.Nodes[5].Type == SqlNodeType.RIGHT_PAREN && node.Nodes[6].Type == SqlNodeType.VALUES && node.Nodes[7].Type == SqlNodeType.LEFT_PAREN && node.Nodes[8].Type == SqlNodeType.ValueList && node.Nodes[9].Type == SqlNodeType.RIGHT_PAREN && node.Nodes[10].Type == SqlNodeType.StatementTail)
						{
							return EvaluateREPLACEINTOIDENTIFIERLEFT_PARENColumnListRIGHT_PARENVALUESLEFT_PARENValueListRIGHT_PARENStatementTail(node);
						}
						if(node.Nodes.Count == 6 && node.Nodes[0].Type == SqlNodeType.UPDATE && node.Nodes[1].Type == SqlNodeType.IDENTIFIER && node.Nodes[2].Type == SqlNodeType.SET && node.Nodes[3].Type == SqlNodeType.SetList && node.Nodes[4].Type == SqlNodeType.WhereClause && node.Nodes[5].Type == SqlNodeType.StatementTail)
						{
							return EvaluateUPDATEIDENTIFIERSETSetListWhereClauseStatementTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.StatementTail:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.SEMICOLON)
						{
							return EvaluateSEMICOLON(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.TableList:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.IDENTIFIER && node.Nodes[1].Type == SqlNodeType.TableTail && node.Nodes[2].Type == SqlNodeType.TableListTail)
						{
							return EvaluateIDENTIFIERTableTailTableListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.TableListTail:
					{
						if(node.Nodes.Count == 4 && node.Nodes[0].Type == SqlNodeType.COMMA && node.Nodes[1].Type == SqlNodeType.IDENTIFIER && node.Nodes[2].Type == SqlNodeType.TableTail && node.Nodes[3].Type == SqlNodeType.TableListTail)
						{
							return EvaluateCOMMAIDENTIFIERTableTailTableListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.TableTail:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.IDENTIFIER)
						{
							return EvaluateIDENTIFIER(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.Union:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.UNION && node.Nodes[1].Type == SqlNodeType.Select)
						{
							return EvaluateUNIONSelect(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.VALUE:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.INTEGER)
						{
							return EvaluateINTEGER(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.FLOAT)
						{
							return EvaluateFLOAT(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.IDENTIFIER)
						{
							return EvaluateIDENTIFIER(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.QUOTED_STRING)
						{
							return EvaluateQUOTED_STRING(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == SqlNodeType.DATE)
						{
							return EvaluateDATE(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.ValueList:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.VALUE && node.Nodes[1].Type == SqlNodeType.ValueListTail)
						{
							return EvaluateVALUEValueListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.ValueListTail:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == SqlNodeType.COMMA && node.Nodes[1].Type == SqlNodeType.VALUE && node.Nodes[2].Type == SqlNodeType.ValueListTail)
						{
							return EvaluateCOMMAVALUEValueListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.WhereClause:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == SqlNodeType.WHERE && node.Nodes[1].Type == SqlNodeType.Predicate)
						{
							return EvaluateWHEREPredicate(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case SqlNodeType.AND:
					{
						return EvaluateAND(node.Value);
					}
				case SqlNodeType.AS:
					{
						return EvaluateAS(node.Value);
					}
				case SqlNodeType.ASC:
					{
						return EvaluateASC(node.Value);
					}
				case SqlNodeType.BETWEEN:
					{
						return EvaluateBETWEEN(node.Value);
					}
				case SqlNodeType.BY:
					{
						return EvaluateBY(node.Value);
					}
				case SqlNodeType.COMMA:
					{
						return EvaluateCOMMA(node.Value);
					}
				case SqlNodeType.DATE:
					{
						return EvaluateDATE(node.Value);
					}
				case SqlNodeType.DELETE:
					{
						return EvaluateDELETE(node.Value);
					}
				case SqlNodeType.DESC:
					{
						return EvaluateDESC(node.Value);
					}
				case SqlNodeType.EQUALS:
					{
						return EvaluateEQUALS(node.Value);
					}
				case SqlNodeType.FLOAT:
					{
						return EvaluateFLOAT(node.Value);
					}
				case SqlNodeType.FROM:
					{
						return EvaluateFROM(node.Value);
					}
				case SqlNodeType.GREATER_THAN:
					{
						return EvaluateGREATER_THAN(node.Value);
					}
				case SqlNodeType.GREATER_THAN_OR_EQUAL:
					{
						return EvaluateGREATER_THAN_OR_EQUAL(node.Value);
					}
				case SqlNodeType.GROUP:
					{
						return EvaluateGROUP(node.Value);
					}
				case SqlNodeType.IDENTIFIER:
					{
						return EvaluateIDENTIFIER(node.Value);
					}
				case SqlNodeType.INNER:
					{
						return EvaluateINNER(node.Value);
					}
				case SqlNodeType.INSERT:
					{
						return EvaluateINSERT(node.Value);
					}
				case SqlNodeType.INTEGER:
					{
						return EvaluateINTEGER(node.Value);
					}
				case SqlNodeType.INTO:
					{
						return EvaluateINTO(node.Value);
					}
				case SqlNodeType.JOIN:
					{
						return EvaluateJOIN(node.Value);
					}
				case SqlNodeType.LEFT:
					{
						return EvaluateLEFT(node.Value);
					}
				case SqlNodeType.LEFT_PAREN:
					{
						return EvaluateLEFT_PAREN(node.Value);
					}
				case SqlNodeType.LESS_THAN:
					{
						return EvaluateLESS_THAN(node.Value);
					}
				case SqlNodeType.LESS_THAN_OR_EQUAL:
					{
						return EvaluateLESS_THAN_OR_EQUAL(node.Value);
					}
				case SqlNodeType.LIKE:
					{
						return EvaluateLIKE(node.Value);
					}
				case SqlNodeType.NOT:
					{
						return EvaluateNOT(node.Value);
					}
				case SqlNodeType.NOT_EQUALS:
					{
						return EvaluateNOT_EQUALS(node.Value);
					}
				case SqlNodeType.ON:
					{
						return EvaluateON(node.Value);
					}
				case SqlNodeType.OR:
					{
						return EvaluateOR(node.Value);
					}
				case SqlNodeType.ORDER:
					{
						return EvaluateORDER(node.Value);
					}
				case SqlNodeType.OUTER:
					{
						return EvaluateOUTER(node.Value);
					}
				case SqlNodeType.QUOTED_STRING:
					{
						return EvaluateQUOTED_STRING(node.Value);
					}
				case SqlNodeType.REPLACE:
					{
						return EvaluateREPLACE(node.Value);
					}
				case SqlNodeType.RIGHT:
					{
						return EvaluateRIGHT(node.Value);
					}
				case SqlNodeType.RIGHT_PAREN:
					{
						return EvaluateRIGHT_PAREN(node.Value);
					}
				case SqlNodeType.SELECT:
					{
						return EvaluateSELECT(node.Value);
					}
				case SqlNodeType.SEMICOLON:
					{
						return EvaluateSEMICOLON(node.Value);
					}
				case SqlNodeType.SET:
					{
						return EvaluateSET(node.Value);
					}
				case SqlNodeType.UNION:
					{
						return EvaluateUNION(node.Value);
					}
				case SqlNodeType.UPDATE:
					{
						return EvaluateUPDATE(node.Value);
					}
				case SqlNodeType.VALUES:
					{
						return EvaluateVALUES(node.Value);
					}
				case SqlNodeType.WHERE:
					{
						return EvaluateWHERE(node.Value);
					}
				default:
					{
						throw new System.Exception("Invalid expression.");
					}
			}
		}

		protected virtual object EvaluateASC(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateDESC(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIERColumnListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAIDENTIFIERColumnListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateEQUALS(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateGREATER_THAN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateGREATER_THAN_OR_EQUAL(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLESS_THAN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLESS_THAN_OR_EQUAL(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateNOT_EQUALS(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLIKE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateFROMTableList(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateVALUEFunctionParameterListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAVALUEFunctionParameterListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateGROUPBYIDENTIFIERGroupByTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAIDENTIFIERGroupByTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINNERJOINIDENTIFIERTableTailONIDENTIFIERComparisonOperatorIDENTIFIERJoinList(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLEFTOUTERJOINIDENTIFIERTableTailONIDENTIFIERComparisonOperatorIDENTIFIERJoinList(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateRIGHTOUTERJOINIDENTIFIERTableTailONIDENTIFIERComparisonOperatorIDENTIFIERJoinList(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateAND(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateOR(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateNOT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateORDERBYIDENTIFIERAscDescOrderByTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAIDENTIFIERAscDescOrderByTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIERPredicateIdentifierTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateComparisonOperatorVALUEPredicateTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateBETWEENVALUEANDVALUEPredicateTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLogicalOperatorPredicate(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSELECTSelectListFromJoinListWhereClauseGroupByClauseOrderByClause(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIERSelectItemTailSelectItemAlias(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateASIDENTIFIER(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLEFT_PARENFunctionParameterListRIGHT_PAREN(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSelectItemSelectListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMASelectItemSelectListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIERComparisonOperatorVALUESetListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAIDENTIFIERComparisonOperatorVALUESetListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSelectUnionStatementTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateDELETEFROMIDENTIFIERWhereClauseStatementTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINSERTINTOIDENTIFIERLEFT_PARENColumnListRIGHT_PARENVALUESLEFT_PARENValueListRIGHT_PARENStatementTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateREPLACEINTOIDENTIFIERLEFT_PARENColumnListRIGHT_PARENVALUESLEFT_PARENValueListRIGHT_PARENStatementTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateUPDATEIDENTIFIERSETSetListWhereClauseStatementTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSEMICOLON(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIERTableTailTableListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAIDENTIFIERTableTailTableListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateUNIONSelect(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINTEGER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateFLOAT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateQUOTED_STRING(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateDATE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateVALUEValueListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAVALUEValueListTail(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateWHEREPredicate(SqlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateAS(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateBETWEEN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateBY(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMA(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateDELETE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateFROM(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateGROUP(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINNER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINSERT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINTO(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateJOIN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLEFT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLEFT_PAREN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateON(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateORDER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateOUTER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateREPLACE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateRIGHT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateRIGHT_PAREN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSELECT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSET(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateUNION(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateUPDATE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateVALUES(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateWHERE(string value)
		{
			throw new System.Exception("Implement.");
		}

	}
}
