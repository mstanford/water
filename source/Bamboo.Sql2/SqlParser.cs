//
// AUTOGENERATED 7/19/2009 5:57:00 PM
//
using System;

namespace Bamboo.Sql2
{
	public class SqlParser
	{
		private SqlTokenizer _tokenizer = new SqlTokenizer();
		private SqlTextReader _reader;
		private SqlToken _token;

		public SqlParser(SqlTextReader reader)
		{
			this._reader = reader;
			this._token = this._tokenizer.Tokenize(this._reader);
		}

		public SqlNode Parse()
		{
			return ParseStatement();
		}

		private SqlNode ParseAscDesc()
		{
			SqlNode node = new SqlNode(SqlNodeType.AscDesc);

			switch (this._token.Type)
			{
				case SqlTokenType.ASC:
					{
						node.Nodes.Add(ParseASC());
						return node;
					}
				case SqlTokenType.DESC:
					{
						node.Nodes.Add(ParseDESC());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseColumnList()
		{
			SqlNode node = new SqlNode(SqlNodeType.ColumnList);

			switch (this._token.Type)
			{
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseColumnListTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseColumnListTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.ColumnListTail);

			switch (this._token.Type)
			{
				case SqlTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseColumnListTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseComparisonOperator()
		{
			SqlNode node = new SqlNode(SqlNodeType.ComparisonOperator);

			switch (this._token.Type)
			{
				case SqlTokenType.EQUALS:
					{
						node.Nodes.Add(ParseEQUALS());
						return node;
					}
				case SqlTokenType.GREATER_THAN:
					{
						node.Nodes.Add(ParseGREATER_THAN());
						return node;
					}
				case SqlTokenType.GREATER_THAN_OR_EQUAL:
					{
						node.Nodes.Add(ParseGREATER_THAN_OR_EQUAL());
						return node;
					}
				case SqlTokenType.LESS_THAN:
					{
						node.Nodes.Add(ParseLESS_THAN());
						return node;
					}
				case SqlTokenType.LESS_THAN_OR_EQUAL:
					{
						node.Nodes.Add(ParseLESS_THAN_OR_EQUAL());
						return node;
					}
				case SqlTokenType.NOT_EQUALS:
					{
						node.Nodes.Add(ParseNOT_EQUALS());
						return node;
					}
				case SqlTokenType.LIKE:
					{
						node.Nodes.Add(ParseLIKE());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseFrom()
		{
			SqlNode node = new SqlNode(SqlNodeType.From);

			switch (this._token.Type)
			{
				case SqlTokenType.FROM:
					{
						node.Nodes.Add(ParseFROM());
						node.Nodes.Add(ParseTableList());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseFunctionParameterList()
		{
			SqlNode node = new SqlNode(SqlNodeType.FunctionParameterList);

			switch (this._token.Type)
			{
				default:
					{
						return node;
					}
				case SqlTokenType.DATE:
				case SqlTokenType.FLOAT:
				case SqlTokenType.IDENTIFIER:
				case SqlTokenType.INTEGER:
				case SqlTokenType.QUOTED_STRING:
					{
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParseFunctionParameterListTail());
						return node;
					}
			}
		}

		private SqlNode ParseFunctionParameterListTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.FunctionParameterListTail);

			switch (this._token.Type)
			{
				case SqlTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParseFunctionParameterListTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseGroupByClause()
		{
			SqlNode node = new SqlNode(SqlNodeType.GroupByClause);

			switch (this._token.Type)
			{
				case SqlTokenType.GROUP:
					{
						node.Nodes.Add(ParseGROUP());
						node.Nodes.Add(ParseBY());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseGroupByTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseGroupByTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.GroupByTail);

			switch (this._token.Type)
			{
				case SqlTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseGroupByTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseJoinList()
		{
			SqlNode node = new SqlNode(SqlNodeType.JoinList);

			switch (this._token.Type)
			{
				case SqlTokenType.INNER:
					{
						node.Nodes.Add(ParseINNER());
						node.Nodes.Add(ParseJOIN());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseTableTail());
						node.Nodes.Add(ParseON());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseComparisonOperator());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseJoinList());
						return node;
					}
				case SqlTokenType.LEFT:
					{
						node.Nodes.Add(ParseLEFT());
						node.Nodes.Add(ParseOUTER());
						node.Nodes.Add(ParseJOIN());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseTableTail());
						node.Nodes.Add(ParseON());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseComparisonOperator());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseJoinList());
						return node;
					}
				case SqlTokenType.RIGHT:
					{
						node.Nodes.Add(ParseRIGHT());
						node.Nodes.Add(ParseOUTER());
						node.Nodes.Add(ParseJOIN());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseTableTail());
						node.Nodes.Add(ParseON());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseComparisonOperator());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseJoinList());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseLogicalOperator()
		{
			SqlNode node = new SqlNode(SqlNodeType.LogicalOperator);

			switch (this._token.Type)
			{
				case SqlTokenType.AND:
					{
						node.Nodes.Add(ParseAND());
						return node;
					}
				case SqlTokenType.OR:
					{
						node.Nodes.Add(ParseOR());
						return node;
					}
				case SqlTokenType.NOT:
					{
						node.Nodes.Add(ParseNOT());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseOrderByClause()
		{
			SqlNode node = new SqlNode(SqlNodeType.OrderByClause);

			switch (this._token.Type)
			{
				case SqlTokenType.ORDER:
					{
						node.Nodes.Add(ParseORDER());
						node.Nodes.Add(ParseBY());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseAscDesc());
						node.Nodes.Add(ParseOrderByTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseOrderByTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.OrderByTail);

			switch (this._token.Type)
			{
				case SqlTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseAscDesc());
						node.Nodes.Add(ParseOrderByTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParsePredicate()
		{
			SqlNode node = new SqlNode(SqlNodeType.Predicate);

			switch (this._token.Type)
			{
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParsePredicateIdentifierTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParsePredicateIdentifierTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.PredicateIdentifierTail);

			switch (this._token.Type)
			{
				case SqlTokenType.EQUALS:
				case SqlTokenType.GREATER_THAN:
				case SqlTokenType.GREATER_THAN_OR_EQUAL:
				case SqlTokenType.LESS_THAN:
				case SqlTokenType.LESS_THAN_OR_EQUAL:
				case SqlTokenType.LIKE:
				case SqlTokenType.NOT_EQUALS:
					{
						node.Nodes.Add(ParseComparisonOperator());
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParsePredicateTail());
						return node;
					}
				case SqlTokenType.BETWEEN:
					{
						node.Nodes.Add(ParseBETWEEN());
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParseAND());
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParsePredicateTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParsePredicateTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.PredicateTail);

			switch (this._token.Type)
			{
				case SqlTokenType.AND:
				case SqlTokenType.NOT:
				case SqlTokenType.OR:
					{
						node.Nodes.Add(ParseLogicalOperator());
						node.Nodes.Add(ParsePredicate());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseSelect()
		{
			SqlNode node = new SqlNode(SqlNodeType.Select);

			switch (this._token.Type)
			{
				case SqlTokenType.SELECT:
					{
						node.Nodes.Add(ParseSELECT());
						node.Nodes.Add(ParseSelectList());
						node.Nodes.Add(ParseFrom());
						node.Nodes.Add(ParseJoinList());
						node.Nodes.Add(ParseWhereClause());
						node.Nodes.Add(ParseGroupByClause());
						node.Nodes.Add(ParseOrderByClause());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseSelectItem()
		{
			SqlNode node = new SqlNode(SqlNodeType.SelectItem);

			switch (this._token.Type)
			{
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseSelectItemTail());
						node.Nodes.Add(ParseSelectItemAlias());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseSelectItemAlias()
		{
			SqlNode node = new SqlNode(SqlNodeType.SelectItemAlias);

			switch (this._token.Type)
			{
				case SqlTokenType.AS:
					{
						node.Nodes.Add(ParseAS());
						node.Nodes.Add(ParseIDENTIFIER());
						return node;
					}
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseSelectItemTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.SelectItemTail);

			switch (this._token.Type)
			{
				case SqlTokenType.LEFT_PAREN:
					{
						node.Nodes.Add(ParseLEFT_PAREN());
						node.Nodes.Add(ParseFunctionParameterList());
						node.Nodes.Add(ParseRIGHT_PAREN());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseSelectList()
		{
			SqlNode node = new SqlNode(SqlNodeType.SelectList);

			switch (this._token.Type)
			{
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseSelectItem());
						node.Nodes.Add(ParseSelectListTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseSelectListTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.SelectListTail);

			switch (this._token.Type)
			{
				case SqlTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseSelectItem());
						node.Nodes.Add(ParseSelectListTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseSetList()
		{
			SqlNode node = new SqlNode(SqlNodeType.SetList);

			switch (this._token.Type)
			{
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseComparisonOperator());
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParseSetListTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseSetListTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.SetListTail);

			switch (this._token.Type)
			{
				case SqlTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseComparisonOperator());
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParseSetListTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseStatement()
		{
			SqlNode node = new SqlNode(SqlNodeType.Statement);

			switch (this._token.Type)
			{
				case SqlTokenType.SELECT:
					{
						node.Nodes.Add(ParseSelect());
						node.Nodes.Add(ParseUnion());
						node.Nodes.Add(ParseStatementTail());
						return node;
					}
				case SqlTokenType.DELETE:
					{
						node.Nodes.Add(ParseDELETE());
						node.Nodes.Add(ParseFROM());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseWhereClause());
						node.Nodes.Add(ParseStatementTail());
						return node;
					}
				case SqlTokenType.INSERT:
					{
						node.Nodes.Add(ParseINSERT());
						node.Nodes.Add(ParseINTO());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseLEFT_PAREN());
						node.Nodes.Add(ParseColumnList());
						node.Nodes.Add(ParseRIGHT_PAREN());
						node.Nodes.Add(ParseVALUES());
						node.Nodes.Add(ParseLEFT_PAREN());
						node.Nodes.Add(ParseValueList());
						node.Nodes.Add(ParseRIGHT_PAREN());
						node.Nodes.Add(ParseStatementTail());
						return node;
					}
				case SqlTokenType.REPLACE:
					{
						node.Nodes.Add(ParseREPLACE());
						node.Nodes.Add(ParseINTO());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseLEFT_PAREN());
						node.Nodes.Add(ParseColumnList());
						node.Nodes.Add(ParseRIGHT_PAREN());
						node.Nodes.Add(ParseVALUES());
						node.Nodes.Add(ParseLEFT_PAREN());
						node.Nodes.Add(ParseValueList());
						node.Nodes.Add(ParseRIGHT_PAREN());
						node.Nodes.Add(ParseStatementTail());
						return node;
					}
				case SqlTokenType.UPDATE:
					{
						node.Nodes.Add(ParseUPDATE());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseSET());
						node.Nodes.Add(ParseSetList());
						node.Nodes.Add(ParseWhereClause());
						node.Nodes.Add(ParseStatementTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseStatementTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.StatementTail);

			switch (this._token.Type)
			{
				case SqlTokenType.SEMICOLON:
					{
						node.Nodes.Add(ParseSEMICOLON());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseTableList()
		{
			SqlNode node = new SqlNode(SqlNodeType.TableList);

			switch (this._token.Type)
			{
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseTableTail());
						node.Nodes.Add(ParseTableListTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseTableListTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.TableListTail);

			switch (this._token.Type)
			{
				case SqlTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseTableTail());
						node.Nodes.Add(ParseTableListTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseTableTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.TableTail);

			switch (this._token.Type)
			{
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseUnion()
		{
			SqlNode node = new SqlNode(SqlNodeType.Union);

			switch (this._token.Type)
			{
				case SqlTokenType.UNION:
					{
						node.Nodes.Add(ParseUNION());
						node.Nodes.Add(ParseSelect());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseVALUE()
		{
			SqlNode node = new SqlNode(SqlNodeType.VALUE);

			switch (this._token.Type)
			{
				case SqlTokenType.INTEGER:
					{
						node.Nodes.Add(ParseINTEGER());
						return node;
					}
				case SqlTokenType.FLOAT:
					{
						node.Nodes.Add(ParseFLOAT());
						return node;
					}
				case SqlTokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						return node;
					}
				case SqlTokenType.QUOTED_STRING:
					{
						node.Nodes.Add(ParseQUOTED_STRING());
						return node;
					}
				case SqlTokenType.DATE:
					{
						node.Nodes.Add(ParseDATE());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseValueList()
		{
			SqlNode node = new SqlNode(SqlNodeType.ValueList);

			switch (this._token.Type)
			{
				case SqlTokenType.DATE:
				case SqlTokenType.FLOAT:
				case SqlTokenType.IDENTIFIER:
				case SqlTokenType.INTEGER:
				case SqlTokenType.QUOTED_STRING:
					{
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParseValueListTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private SqlNode ParseValueListTail()
		{
			SqlNode node = new SqlNode(SqlNodeType.ValueListTail);

			switch (this._token.Type)
			{
				case SqlTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseVALUE());
						node.Nodes.Add(ParseValueListTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseWhereClause()
		{
			SqlNode node = new SqlNode(SqlNodeType.WhereClause);

			switch (this._token.Type)
			{
				case SqlTokenType.WHERE:
					{
						node.Nodes.Add(ParseWHERE());
						node.Nodes.Add(ParsePredicate());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private SqlNode ParseAND()
		{
			if(this._token.Type == SqlTokenType.AND)
			{
				SqlNode node = new SqlNode(SqlNodeType.AND, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseAS()
		{
			if(this._token.Type == SqlTokenType.AS)
			{
				SqlNode node = new SqlNode(SqlNodeType.AS, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseASC()
		{
			if(this._token.Type == SqlTokenType.ASC)
			{
				SqlNode node = new SqlNode(SqlNodeType.ASC, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseBETWEEN()
		{
			if(this._token.Type == SqlTokenType.BETWEEN)
			{
				SqlNode node = new SqlNode(SqlNodeType.BETWEEN, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseBY()
		{
			if(this._token.Type == SqlTokenType.BY)
			{
				SqlNode node = new SqlNode(SqlNodeType.BY, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseCOMMA()
		{
			if(this._token.Type == SqlTokenType.COMMA)
			{
				SqlNode node = new SqlNode(SqlNodeType.COMMA, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseDATE()
		{
			if(this._token.Type == SqlTokenType.DATE)
			{
				SqlNode node = new SqlNode(SqlNodeType.DATE, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseDELETE()
		{
			if(this._token.Type == SqlTokenType.DELETE)
			{
				SqlNode node = new SqlNode(SqlNodeType.DELETE, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseDESC()
		{
			if(this._token.Type == SqlTokenType.DESC)
			{
				SqlNode node = new SqlNode(SqlNodeType.DESC, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseEQUALS()
		{
			if(this._token.Type == SqlTokenType.EQUALS)
			{
				SqlNode node = new SqlNode(SqlNodeType.EQUALS, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseFLOAT()
		{
			if(this._token.Type == SqlTokenType.FLOAT)
			{
				SqlNode node = new SqlNode(SqlNodeType.FLOAT, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseFROM()
		{
			if(this._token.Type == SqlTokenType.FROM)
			{
				SqlNode node = new SqlNode(SqlNodeType.FROM, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseGREATER_THAN()
		{
			if(this._token.Type == SqlTokenType.GREATER_THAN)
			{
				SqlNode node = new SqlNode(SqlNodeType.GREATER_THAN, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseGREATER_THAN_OR_EQUAL()
		{
			if(this._token.Type == SqlTokenType.GREATER_THAN_OR_EQUAL)
			{
				SqlNode node = new SqlNode(SqlNodeType.GREATER_THAN_OR_EQUAL, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseGROUP()
		{
			if(this._token.Type == SqlTokenType.GROUP)
			{
				SqlNode node = new SqlNode(SqlNodeType.GROUP, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseIDENTIFIER()
		{
			if(this._token.Type == SqlTokenType.IDENTIFIER)
			{
				SqlNode node = new SqlNode(SqlNodeType.IDENTIFIER, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseINNER()
		{
			if(this._token.Type == SqlTokenType.INNER)
			{
				SqlNode node = new SqlNode(SqlNodeType.INNER, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseINSERT()
		{
			if(this._token.Type == SqlTokenType.INSERT)
			{
				SqlNode node = new SqlNode(SqlNodeType.INSERT, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseINTEGER()
		{
			if(this._token.Type == SqlTokenType.INTEGER)
			{
				SqlNode node = new SqlNode(SqlNodeType.INTEGER, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseINTO()
		{
			if(this._token.Type == SqlTokenType.INTO)
			{
				SqlNode node = new SqlNode(SqlNodeType.INTO, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseJOIN()
		{
			if(this._token.Type == SqlTokenType.JOIN)
			{
				SqlNode node = new SqlNode(SqlNodeType.JOIN, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseLEFT()
		{
			if(this._token.Type == SqlTokenType.LEFT)
			{
				SqlNode node = new SqlNode(SqlNodeType.LEFT, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseLEFT_PAREN()
		{
			if(this._token.Type == SqlTokenType.LEFT_PAREN)
			{
				SqlNode node = new SqlNode(SqlNodeType.LEFT_PAREN, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseLESS_THAN()
		{
			if(this._token.Type == SqlTokenType.LESS_THAN)
			{
				SqlNode node = new SqlNode(SqlNodeType.LESS_THAN, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseLESS_THAN_OR_EQUAL()
		{
			if(this._token.Type == SqlTokenType.LESS_THAN_OR_EQUAL)
			{
				SqlNode node = new SqlNode(SqlNodeType.LESS_THAN_OR_EQUAL, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseLIKE()
		{
			if(this._token.Type == SqlTokenType.LIKE)
			{
				SqlNode node = new SqlNode(SqlNodeType.LIKE, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseNOT()
		{
			if(this._token.Type == SqlTokenType.NOT)
			{
				SqlNode node = new SqlNode(SqlNodeType.NOT, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseNOT_EQUALS()
		{
			if(this._token.Type == SqlTokenType.NOT_EQUALS)
			{
				SqlNode node = new SqlNode(SqlNodeType.NOT_EQUALS, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseON()
		{
			if(this._token.Type == SqlTokenType.ON)
			{
				SqlNode node = new SqlNode(SqlNodeType.ON, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseOR()
		{
			if(this._token.Type == SqlTokenType.OR)
			{
				SqlNode node = new SqlNode(SqlNodeType.OR, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseORDER()
		{
			if(this._token.Type == SqlTokenType.ORDER)
			{
				SqlNode node = new SqlNode(SqlNodeType.ORDER, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseOUTER()
		{
			if(this._token.Type == SqlTokenType.OUTER)
			{
				SqlNode node = new SqlNode(SqlNodeType.OUTER, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseQUOTED_STRING()
		{
			if(this._token.Type == SqlTokenType.QUOTED_STRING)
			{
				SqlNode node = new SqlNode(SqlNodeType.QUOTED_STRING, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseREPLACE()
		{
			if(this._token.Type == SqlTokenType.REPLACE)
			{
				SqlNode node = new SqlNode(SqlNodeType.REPLACE, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseRIGHT()
		{
			if(this._token.Type == SqlTokenType.RIGHT)
			{
				SqlNode node = new SqlNode(SqlNodeType.RIGHT, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseRIGHT_PAREN()
		{
			if(this._token.Type == SqlTokenType.RIGHT_PAREN)
			{
				SqlNode node = new SqlNode(SqlNodeType.RIGHT_PAREN, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseSELECT()
		{
			if(this._token.Type == SqlTokenType.SELECT)
			{
				SqlNode node = new SqlNode(SqlNodeType.SELECT, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseSEMICOLON()
		{
			if(this._token.Type == SqlTokenType.SEMICOLON)
			{
				SqlNode node = new SqlNode(SqlNodeType.SEMICOLON, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseSET()
		{
			if(this._token.Type == SqlTokenType.SET)
			{
				SqlNode node = new SqlNode(SqlNodeType.SET, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseUNION()
		{
			if(this._token.Type == SqlTokenType.UNION)
			{
				SqlNode node = new SqlNode(SqlNodeType.UNION, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseUPDATE()
		{
			if(this._token.Type == SqlTokenType.UPDATE)
			{
				SqlNode node = new SqlNode(SqlNodeType.UPDATE, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseVALUES()
		{
			if(this._token.Type == SqlTokenType.VALUES)
			{
				SqlNode node = new SqlNode(SqlNodeType.VALUES, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

		private SqlNode ParseWHERE()
		{
			if(this._token.Type == SqlTokenType.WHERE)
			{
				SqlNode node = new SqlNode(SqlNodeType.WHERE, this._token.Value);
				this._token = this._tokenizer.Tokenize(this._reader);
				return node;
			}
			else
			{
				throw new System.Exception("Syntax error.");
			}
		}

	}
}
