//
// AUTOGENERATED 12/30/2008 4:01:14 PM
//
using System;

namespace Stream
{
	public class Generator
	{

		public Generator()
		{
		}

		public void Generate(Node node, System.IO.TextWriter writer)
		{
			bool writeWhitespace = false;

			Generate(node, writer, ref writeWhitespace);
		}

		private void Generate(Node node, System.IO.TextWriter writer, ref bool writeWhitespace)
		{
			switch(node.Type)
			{
				case NodeType.Expression:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case NodeType.ExpressionList:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case NodeType.ExpressionListTail:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case NodeType.ExpressionTail:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case NodeType.ASSIGNMENT:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.BOOLEAN:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.CHARACTER:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.COMMA:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.EPSILON:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.EQUALS:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.FLOAT:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.IDENTIFIER:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.INTEGER:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.LEFT_PAREN:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.RIGHT_PAREN:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case NodeType.STRING:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				default:
					{
						throw new System.Exception("Invalid node type.");
					}
			}
		}

	}
}
