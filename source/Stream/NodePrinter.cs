//
// AUTOGENERATED 12/30/2008 4:01:14 PM
//
using System;

namespace Stream
{
	public class NodePrinter
	{

		public static void Print(Node node, System.IO.TextWriter writer)
		{
			Print(node, writer, 0);
		}

		private static void Print(Node node, System.IO.TextWriter writer, int indentationLevel)
		{
			switch(node.Type)
			{
				case NodeType.Expression :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Expression:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.ExpressionList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ExpressionList:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.ExpressionListTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ExpressionListTail:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.ExpressionTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ExpressionTail:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.ASSIGNMENT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ASSIGNMENT: " + node.Value);
						break;
					}
				case NodeType.BOOLEAN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("BOOLEAN: " + node.Value);
						break;
					}
				case NodeType.CHARACTER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("CHARACTER: " + node.Value);
						break;
					}
				case NodeType.COMMA :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("COMMA: " + node.Value);
						break;
					}
				case NodeType.EPSILON :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("EPSILON: " + node.Value);
						break;
					}
				case NodeType.EQUALS :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("EQUALS: " + node.Value);
						break;
					}
				case NodeType.FLOAT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("FLOAT: " + node.Value);
						break;
					}
				case NodeType.IDENTIFIER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("IDENTIFIER: " + node.Value);
						break;
					}
				case NodeType.INTEGER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("INTEGER: " + node.Value);
						break;
					}
				case NodeType.LEFT_PAREN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LEFT_PAREN: " + node.Value);
						break;
					}
				case NodeType.RIGHT_PAREN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("RIGHT_PAREN: " + node.Value);
						break;
					}
				case NodeType.STRING :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("STRING: " + node.Value);
						break;
					}
				default:
					{
						throw new System.Exception("Invalid node type.");
					}
			}
		}

		private NodePrinter()
		{
		}

	}
}
