//
// AUTOGENERATED 4/15/2009 8:21:57 PM
//
using System;

namespace Bamboo.Html
{
	public class HtmlGenerator
	{

		public HtmlGenerator()
		{
		}

		public void Generate(HtmlNode node, System.IO.TextWriter writer)
		{
			bool writeWhitespace = false;

			Generate(node, writer, ref writeWhitespace);
		}

		private void Generate(HtmlNode node, System.IO.TextWriter writer, ref bool writeWhitespace)
		{
			switch(node.Type)
			{
				case HtmlNodeType.Attribute:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case HtmlNodeType.AttributeList:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case HtmlNodeType.AttributeTail:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case HtmlNodeType.AttributeTail2:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case HtmlNodeType.Content:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case HtmlNodeType.EndTag:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case HtmlNodeType.Node:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case HtmlNodeType.StartTag:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case HtmlNodeType.EPSILON:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case HtmlNodeType.EQUALS:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case HtmlNodeType.FLOAT:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case HtmlNodeType.GREATER_THAN:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case HtmlNodeType.INTEGER:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case HtmlNodeType.LESS_THAN:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case HtmlNodeType.LESS_THAN_FORWARD_SLASH:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case HtmlNodeType.QUOTED_STRING:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case HtmlNodeType.STRING:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				default:
					{
						throw new System.Exception("Invalid node type.");
					}
			}
		}

	}
}
