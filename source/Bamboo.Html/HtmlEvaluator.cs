//
// AUTOGENERATED 4/15/2009 8:21:57 PM
//
using System;

namespace Bamboo.Html
{
	public abstract class HtmlEvaluator
	{

		public HtmlEvaluator()
		{
		}

		public object Evaluate(HtmlNode node)
		{
			switch (node.Type)
			{
				case HtmlNodeType.Attribute:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == HtmlNodeType.STRING && node.Nodes[1].Type == HtmlNodeType.AttributeTail)
						{
							return EvaluateSTRINGAttributeTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case HtmlNodeType.AttributeList:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == HtmlNodeType.Attribute && node.Nodes[1].Type == HtmlNodeType.AttributeList)
						{
							return EvaluateAttributeAttributeList(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case HtmlNodeType.AttributeTail:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == HtmlNodeType.EQUALS && node.Nodes[1].Type == HtmlNodeType.AttributeTail2)
						{
							return EvaluateEQUALSAttributeTail2(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case HtmlNodeType.AttributeTail2:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.QUOTED_STRING)
						{
							return EvaluateQUOTED_STRING(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.STRING)
						{
							return EvaluateSTRING(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.INTEGER)
						{
							return EvaluateINTEGER(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case HtmlNodeType.Content:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.STRING)
						{
							return EvaluateSTRING(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.INTEGER)
						{
							return EvaluateINTEGER(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.FLOAT)
						{
							return EvaluateFLOAT(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case HtmlNodeType.EndTag:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == HtmlNodeType.LESS_THAN_FORWARD_SLASH && node.Nodes[1].Type == HtmlNodeType.STRING && node.Nodes[2].Type == HtmlNodeType.GREATER_THAN)
						{
							return EvaluateLESS_THAN_FORWARD_SLASHSTRINGGREATER_THAN(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case HtmlNodeType.Node:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.StartTag)
						{
							return EvaluateStartTag(node.Nodes[0]);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.EndTag)
						{
							return EvaluateEndTag(node.Nodes[0]);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == HtmlNodeType.Content)
						{
							return EvaluateContent(node.Nodes[0]);
						}
						throw new System.Exception("Invalid expression.");
					}
				case HtmlNodeType.StartTag:
					{
						if(node.Nodes.Count == 4 && node.Nodes[0].Type == HtmlNodeType.LESS_THAN && node.Nodes[1].Type == HtmlNodeType.STRING && node.Nodes[2].Type == HtmlNodeType.AttributeList && node.Nodes[3].Type == HtmlNodeType.GREATER_THAN)
						{
							return EvaluateLESS_THANSTRINGAttributeListGREATER_THAN(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case HtmlNodeType.EQUALS:
					{
						return EvaluateEQUALS(node.Value);
					}
				case HtmlNodeType.FLOAT:
					{
						return EvaluateFLOAT(node.Value);
					}
				case HtmlNodeType.GREATER_THAN:
					{
						return EvaluateGREATER_THAN(node.Value);
					}
				case HtmlNodeType.INTEGER:
					{
						return EvaluateINTEGER(node.Value);
					}
				case HtmlNodeType.LESS_THAN:
					{
						return EvaluateLESS_THAN(node.Value);
					}
				case HtmlNodeType.LESS_THAN_FORWARD_SLASH:
					{
						return EvaluateLESS_THAN_FORWARD_SLASH(node.Value);
					}
				case HtmlNodeType.QUOTED_STRING:
					{
						return EvaluateQUOTED_STRING(node.Value);
					}
				case HtmlNodeType.STRING:
					{
						return EvaluateSTRING(node.Value);
					}
				default:
					{
						throw new System.Exception("Invalid expression.");
					}
			}
		}

		protected virtual object EvaluateSTRINGAttributeTail(HtmlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateAttributeAttributeList(HtmlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateEQUALSAttributeTail2(HtmlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateQUOTED_STRING(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSTRING(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINTEGER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateFLOAT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLESS_THAN_FORWARD_SLASHSTRINGGREATER_THAN(HtmlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateStartTag(HtmlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateEndTag(HtmlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateContent(HtmlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLESS_THANSTRINGAttributeListGREATER_THAN(HtmlNode node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateEQUALS(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateGREATER_THAN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLESS_THAN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLESS_THAN_FORWARD_SLASH(string value)
		{
			throw new System.Exception("Implement.");
		}

	}
}
