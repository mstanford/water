//
// AUTOGENERATED 4/15/2009 8:21:57 PM
//
using System;

namespace Bamboo.Html
{
	public class HtmlParser
	{
		private HtmlTokenizer _tokenizer = new HtmlTokenizer();
		private HtmlTextReader _reader;
		private HtmlToken _token;

		public HtmlParser(HtmlTextReader reader)
		{
			this._reader = reader;
			this._token = this._tokenizer.Tokenize(this._reader);
		}

		public HtmlNode Parse()
		{
			return ParseNode();
		}

		private HtmlNode ParseAttribute()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.Attribute);

			switch (this._token.Type)
			{
				case HtmlTokenType.STRING:
					{
						node.Nodes.Add(ParseSTRING());
						node.Nodes.Add(ParseAttributeTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private HtmlNode ParseAttributeList()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.AttributeList);

			switch (this._token.Type)
			{
				case HtmlTokenType.STRING:
					{
						node.Nodes.Add(ParseAttribute());
						node.Nodes.Add(ParseAttributeList());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private HtmlNode ParseAttributeTail()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.AttributeTail);

			switch (this._token.Type)
			{
				case HtmlTokenType.EQUALS:
					{
						node.Nodes.Add(ParseEQUALS());
						node.Nodes.Add(ParseAttributeTail2());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private HtmlNode ParseAttributeTail2()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.AttributeTail2);

			switch (this._token.Type)
			{
				case HtmlTokenType.QUOTED_STRING:
					{
						node.Nodes.Add(ParseQUOTED_STRING());
						return node;
					}
				case HtmlTokenType.STRING:
					{
						node.Nodes.Add(ParseSTRING());
						return node;
					}
				case HtmlTokenType.INTEGER:
					{
						node.Nodes.Add(ParseINTEGER());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private HtmlNode ParseContent()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.Content);

			switch (this._token.Type)
			{
				case HtmlTokenType.STRING:
					{
						node.Nodes.Add(ParseSTRING());
						return node;
					}
				case HtmlTokenType.INTEGER:
					{
						node.Nodes.Add(ParseINTEGER());
						return node;
					}
				case HtmlTokenType.FLOAT:
					{
						node.Nodes.Add(ParseFLOAT());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private HtmlNode ParseEndTag()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.EndTag);

			switch (this._token.Type)
			{
				case HtmlTokenType.LESS_THAN_FORWARD_SLASH:
					{
						node.Nodes.Add(ParseLESS_THAN_FORWARD_SLASH());
						node.Nodes.Add(ParseSTRING());
						node.Nodes.Add(ParseGREATER_THAN());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private HtmlNode ParseNode()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.Node);

			switch (this._token.Type)
			{
				case HtmlTokenType.LESS_THAN:
					{
						node.Nodes.Add(ParseStartTag());
						return node;
					}
				case HtmlTokenType.LESS_THAN_FORWARD_SLASH:
					{
						node.Nodes.Add(ParseEndTag());
						return node;
					}
				case HtmlTokenType.FLOAT:
				case HtmlTokenType.INTEGER:
				case HtmlTokenType.STRING:
					{
						node.Nodes.Add(ParseContent());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private HtmlNode ParseStartTag()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.StartTag);

			switch (this._token.Type)
			{
				case HtmlTokenType.LESS_THAN:
					{
						node.Nodes.Add(ParseLESS_THAN());
						node.Nodes.Add(ParseSTRING());
						node.Nodes.Add(ParseAttributeList());
						node.Nodes.Add(ParseGREATER_THAN());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private HtmlNode ParseEQUALS()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.EQUALS, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private HtmlNode ParseFLOAT()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.FLOAT, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private HtmlNode ParseGREATER_THAN()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.GREATER_THAN, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private HtmlNode ParseINTEGER()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.INTEGER, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private HtmlNode ParseLESS_THAN()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.LESS_THAN, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private HtmlNode ParseLESS_THAN_FORWARD_SLASH()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.LESS_THAN_FORWARD_SLASH, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private HtmlNode ParseQUOTED_STRING()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.QUOTED_STRING, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private HtmlNode ParseSTRING()
		{
			HtmlNode node = new HtmlNode(HtmlNodeType.STRING, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

	}
}
