//
// AUTOGENERATED 4/15/2009 8:21:57 PM
//
using System;

namespace Bamboo.Html
{
	public class HtmlNodePrinter
	{

		public static void Print(HtmlNode node, System.IO.TextWriter writer)
		{
			Print(node, writer, 0);
		}

		private static void Print(HtmlNode node, System.IO.TextWriter writer, int indentationLevel)
		{
			switch(node.Type)
			{
				case HtmlNodeType.Attribute :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Attribute:");
						foreach(HtmlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case HtmlNodeType.AttributeList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("AttributeList:");
						foreach(HtmlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case HtmlNodeType.AttributeTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("AttributeTail:");
						foreach(HtmlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case HtmlNodeType.AttributeTail2 :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("AttributeTail2:");
						foreach(HtmlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case HtmlNodeType.Content :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Content:");
						foreach(HtmlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case HtmlNodeType.EndTag :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("EndTag:");
						foreach(HtmlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case HtmlNodeType.Node :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Node:");
						foreach(HtmlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case HtmlNodeType.StartTag :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("StartTag:");
						foreach(HtmlNode node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case HtmlNodeType.EPSILON :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("EPSILON: " + node.Value);
						break;
					}
				case HtmlNodeType.EQUALS :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("EQUALS: " + node.Value);
						break;
					}
				case HtmlNodeType.FLOAT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("FLOAT: " + node.Value);
						break;
					}
				case HtmlNodeType.GREATER_THAN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("GREATER_THAN: " + node.Value);
						break;
					}
				case HtmlNodeType.INTEGER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("INTEGER: " + node.Value);
						break;
					}
				case HtmlNodeType.LESS_THAN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LESS_THAN: " + node.Value);
						break;
					}
				case HtmlNodeType.LESS_THAN_FORWARD_SLASH :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("LESS_THAN_FORWARD_SLASH: " + node.Value);
						break;
					}
				case HtmlNodeType.QUOTED_STRING :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("QUOTED_STRING: " + node.Value);
						break;
					}
				case HtmlNodeType.STRING :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("STRING: " + node.Value);
						break;
					}
				default:
					{
						throw new System.Exception("Invalid node type.");
					}
			}
		}

		private HtmlNodePrinter()
		{
		}

	}
}
