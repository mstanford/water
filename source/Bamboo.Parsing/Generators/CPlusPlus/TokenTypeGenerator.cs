// ------------------------------------------------------------------------------
// 
// Copyright (c) 2008-2009 Swampware, Inc.
// 
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// 
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text;

namespace Bamboo.Parsing.Generators.CPlusPlus
{
	public class TokenTypeGenerator
	{

		public static void GenerateHeader(string name, string multinamespace, Bamboo.Parsing.FiniteAutomata.FiniteAutomaton finiteAutomaton, System.IO.TextWriter writer)
		{
			writer.WriteLine("//");
			writer.WriteLine("// " + name + "TokenType.h");
			writer.WriteLine("//");
			writer.WriteLine("// AUTOGENERATED " + System.DateTime.Now + "");
			writer.WriteLine("//");
			writer.WriteLine("");
			writer.WriteLine("#pragma once");
			writer.WriteLine("");

			string[] namespaces = multinamespace.Split(new string[] { "::" }, StringSplitOptions.None);
			foreach (string nspace in namespaces)
			{
				writer.WriteLine("namespace " + nspace + "");
				writer.WriteLine("{");
			}

			writer.WriteLine("namespace " + name + "TokenType");
			writer.WriteLine("{");
			Dictionary<string, string> tokens = new Dictionary<string, string>();
			foreach (Bamboo.Parsing.FiniteAutomata.Token token in finiteAutomaton.Tokens)
			{
				if (!tokens.ContainsKey(token.Name))
				{
					tokens.Add(token.Name, token.Name);
				}
			}
			int i = 0;
			foreach (string tokenName in tokens.Keys)
			{
				writer.WriteLine("	const int " + tokenName + " = " + i++ + ";");
			}

			writer.WriteLine("");
			writer.WriteLine("	const int _ERROR_ = " + i++ + ";");
			writer.WriteLine("	const int _EOF_ = " + i++ + ";");
			writer.WriteLine("}");

			foreach (string nspace in namespaces)
			{
				writer.WriteLine("}");
			}
		}

		private TokenTypeGenerator()
		{
		}

	}
}
