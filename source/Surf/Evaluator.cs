//
// AUTOGENERATED 12/24/2008 11:44:09 AM
//
using System;

namespace Surf
{
	public abstract class Evaluator
	{

		public Evaluator()
		{
		}

		public object Evaluate(Node node)
		{
			switch (node.Type)
			{
				case NodeType.Expression:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.Set)
						{
							return EvaluateSet(node.Nodes[0]);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.Tuple)
						{
							return EvaluateTuple(node.Nodes[0]);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.BOOLEAN)
						{
							return EvaluateBOOLEAN(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.INTEGER)
						{
							return EvaluateINTEGER(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.FLOAT)
						{
							return EvaluateFLOAT(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.CHARACTER)
						{
							return EvaluateCHARACTER(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.STRING)
						{
							return EvaluateSTRING(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.BITMAP)
						{
							return EvaluateBITMAP(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.IDENTIFIER && node.Nodes[1].Type == NodeType.ExpressionTail)
						{
							return EvaluateIDENTIFIERExpressionTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.ExpressionList:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.Expression && node.Nodes[1].Type == NodeType.ExpressionListTail)
						{
							return EvaluateExpressionExpressionListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.ExpressionListTail:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == NodeType.COMMA && node.Nodes[1].Type == NodeType.Expression && node.Nodes[2].Type == NodeType.ExpressionListTail)
						{
							return EvaluateCOMMAExpressionExpressionListTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.ExpressionTail:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.ASSIGNMENT && node.Nodes[1].Type == NodeType.Expression)
						{
							return EvaluateASSIGNMENTExpression(node);
						}
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.UNION && node.Nodes[1].Type == NodeType.Expression)
						{
							return EvaluateUNIONExpression(node);
						}
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.INTERSECTION && node.Nodes[1].Type == NodeType.Expression)
						{
							return EvaluateINTERSECTIONExpression(node);
						}
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.DIFFERENCE && node.Nodes[1].Type == NodeType.Expression)
						{
							return EvaluateDIFFERENCEExpression(node);
						}
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.EQUALS && node.Nodes[1].Type == NodeType.Expression)
						{
							return EvaluateEQUALSExpression(node);
						}
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == NodeType.LEFT_PAREN && node.Nodes[1].Type == NodeType.ExpressionList && node.Nodes[2].Type == NodeType.RIGHT_PAREN)
						{
							return EvaluateLEFT_PARENExpressionListRIGHT_PAREN(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.Set:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == NodeType.LEFT_CURLY_BRACE && node.Nodes[1].Type == NodeType.ExpressionList && node.Nodes[2].Type == NodeType.RIGHT_CURLY_BRACE)
						{
							return EvaluateLEFT_CURLY_BRACEExpressionListRIGHT_CURLY_BRACE(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.Tuple:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == NodeType.LEFT_PAREN && node.Nodes[1].Type == NodeType.ExpressionList && node.Nodes[2].Type == NodeType.RIGHT_PAREN)
						{
							return EvaluateLEFT_PARENExpressionListRIGHT_PAREN(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.ASSIGNMENT:
					{
						return EvaluateASSIGNMENT(node.Value);
					}
				case NodeType.BITMAP:
					{
						return EvaluateBITMAP(node.Value);
					}
				case NodeType.BOOLEAN:
					{
						return EvaluateBOOLEAN(node.Value);
					}
				case NodeType.CHARACTER:
					{
						return EvaluateCHARACTER(node.Value);
					}
				case NodeType.COMMA:
					{
						return EvaluateCOMMA(node.Value);
					}
				case NodeType.DIFFERENCE:
					{
						return EvaluateDIFFERENCE(node.Value);
					}
				case NodeType.EQUALS:
					{
						return EvaluateEQUALS(node.Value);
					}
				case NodeType.FLOAT:
					{
						return EvaluateFLOAT(node.Value);
					}
				case NodeType.IDENTIFIER:
					{
						return EvaluateIDENTIFIER(node.Value);
					}
				case NodeType.INTEGER:
					{
						return EvaluateINTEGER(node.Value);
					}
				case NodeType.INTERSECTION:
					{
						return EvaluateINTERSECTION(node.Value);
					}
				case NodeType.LEFT_CURLY_BRACE:
					{
						return EvaluateLEFT_CURLY_BRACE(node.Value);
					}
				case NodeType.LEFT_PAREN:
					{
						return EvaluateLEFT_PAREN(node.Value);
					}
				case NodeType.RIGHT_CURLY_BRACE:
					{
						return EvaluateRIGHT_CURLY_BRACE(node.Value);
					}
				case NodeType.RIGHT_PAREN:
					{
						return EvaluateRIGHT_PAREN(node.Value);
					}
				case NodeType.STRING:
					{
						return EvaluateSTRING(node.Value);
					}
				case NodeType.UNION:
					{
						return EvaluateUNION(node.Value);
					}
				default:
					{
						throw new System.Exception("Invalid expression.");
					}
			}
		}

		protected virtual object EvaluateSet(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateTuple(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateBOOLEAN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINTEGER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateFLOAT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCHARACTER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSTRING(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateBITMAP(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIERExpressionTail(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateExpressionExpressionListTail(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAExpressionExpressionListTail(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateASSIGNMENTExpression(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateUNIONExpression(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINTERSECTIONExpression(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateDIFFERENCEExpression(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateEQUALSExpression(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLEFT_PARENExpressionListRIGHT_PAREN(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLEFT_CURLY_BRACEExpressionListRIGHT_CURLY_BRACE(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateASSIGNMENT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMA(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateDIFFERENCE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateEQUALS(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINTERSECTION(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLEFT_CURLY_BRACE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateLEFT_PAREN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateRIGHT_CURLY_BRACE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateRIGHT_PAREN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateUNION(string value)
		{
			throw new System.Exception("Implement.");
		}

	}
}
