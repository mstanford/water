//
// AUTOGENERATED 1/1/2009 12:42:21 PM
//
using System;

namespace Ice
{
	public class NodePrinter
	{

		public static void Print(Node node, System.IO.TextWriter writer)
		{
			Print(node, writer, 0);
		}

		private static void Print(Node node, System.IO.TextWriter writer, int indentationLevel)
		{
			switch(node.Type)
			{
				case NodeType.Expression :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Expression:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.ExpressionList :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("ExpressionList:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.Instruction :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("Instruction:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.InstructionEnd :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("InstructionEnd:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.InstructionTail :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("InstructionTail:");
						foreach(Node node2 in node.Nodes)
						{
							Print(node2, writer, indentationLevel + 1);
						}
						break;
					}
				case NodeType.BOOLEAN :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("BOOLEAN: " + node.Value);
						break;
					}
				case NodeType.CHARACTER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("CHARACTER: " + node.Value);
						break;
					}
				case NodeType.COMMA :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("COMMA: " + node.Value);
						break;
					}
				case NodeType.FLOAT :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("FLOAT: " + node.Value);
						break;
					}
				case NodeType.IDENTIFIER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("IDENTIFIER: " + node.Value);
						break;
					}
				case NodeType.INTEGER :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("INTEGER: " + node.Value);
						break;
					}
				case NodeType.NEWLINE :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("NEWLINE: " + node.Value);
						break;
					}
				case NodeType.STRING :
					{
						for(int i = 0; i < indentationLevel; i++)
						{
							System.Console.Write("   ");
						}
						System.Console.WriteLine("STRING: " + node.Value);
						break;
					}
				default:
					{
						throw new System.Exception("Invalid node type.");
					}
			}
		}

		private NodePrinter()
		{
		}

	}
}
