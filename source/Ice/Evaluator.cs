//
// AUTOGENERATED 1/1/2009 12:42:21 PM
//
using System;

namespace Ice
{
	public abstract class Evaluator
	{

		public Evaluator()
		{
		}

		public object Evaluate(Node node)
		{
			switch (node.Type)
			{
				case NodeType.Expression:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.BOOLEAN)
						{
							return EvaluateBOOLEAN(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.INTEGER)
						{
							return EvaluateINTEGER(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.FLOAT)
						{
							return EvaluateFLOAT(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.CHARACTER)
						{
							return EvaluateCHARACTER(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.STRING)
						{
							return EvaluateSTRING(node.Nodes[0].Value);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.IDENTIFIER)
						{
							return EvaluateIDENTIFIER(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.ExpressionList:
					{
						if(node.Nodes.Count == 3 && node.Nodes[0].Type == NodeType.COMMA && node.Nodes[1].Type == NodeType.Expression && node.Nodes[2].Type == NodeType.ExpressionList)
						{
							return EvaluateCOMMAExpressionExpressionList(node);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.InstructionEnd)
						{
							return EvaluateInstructionEnd(node.Nodes[0]);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.Instruction:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.IDENTIFIER && node.Nodes[1].Type == NodeType.InstructionTail)
						{
							return EvaluateIDENTIFIERInstructionTail(node);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.InstructionEnd:
					{
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.NEWLINE)
						{
							return EvaluateNEWLINE(node.Nodes[0].Value);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.InstructionTail:
					{
						if(node.Nodes.Count == 2 && node.Nodes[0].Type == NodeType.Expression && node.Nodes[1].Type == NodeType.ExpressionList)
						{
							return EvaluateExpressionExpressionList(node);
						}
						if(node.Nodes.Count == 1 && node.Nodes[0].Type == NodeType.InstructionEnd)
						{
							return EvaluateInstructionEnd(node.Nodes[0]);
						}
						throw new System.Exception("Invalid expression.");
					}
				case NodeType.BOOLEAN:
					{
						return EvaluateBOOLEAN(node.Value);
					}
				case NodeType.CHARACTER:
					{
						return EvaluateCHARACTER(node.Value);
					}
				case NodeType.COMMA:
					{
						return EvaluateCOMMA(node.Value);
					}
				case NodeType.FLOAT:
					{
						return EvaluateFLOAT(node.Value);
					}
				case NodeType.IDENTIFIER:
					{
						return EvaluateIDENTIFIER(node.Value);
					}
				case NodeType.INTEGER:
					{
						return EvaluateINTEGER(node.Value);
					}
				case NodeType.NEWLINE:
					{
						return EvaluateNEWLINE(node.Value);
					}
				case NodeType.STRING:
					{
						return EvaluateSTRING(node.Value);
					}
				default:
					{
						throw new System.Exception("Invalid expression.");
					}
			}
		}

		protected virtual object EvaluateBOOLEAN(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateINTEGER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateFLOAT(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCHARACTER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateSTRING(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIER(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMAExpressionExpressionList(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateInstructionEnd(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateIDENTIFIERInstructionTail(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateNEWLINE(string value)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateExpressionExpressionList(Node node)
		{
			throw new System.Exception("Implement.");
		}

		protected virtual object EvaluateCOMMA(string value)
		{
			throw new System.Exception("Implement.");
		}

	}
}
