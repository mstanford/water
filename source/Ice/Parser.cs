//
// AUTOGENERATED 1/1/2009 12:42:21 PM
//
using System;

namespace Ice
{
	public class Parser
	{
		private Tokenizer _tokenizer = new Tokenizer();
		private TextReader _reader;
		private Token _token;

		public Parser(TextReader reader)
		{
			this._reader = reader;
			this._token = this._tokenizer.Tokenize(this._reader);
		}

		public Node Parse()
		{
			return ParseInstruction();
		}

		private Node ParseExpression()
		{
			Node node = new Node(NodeType.Expression);

			switch (this._token.Type)
			{
				case TokenType.BOOLEAN:
					{
						node.Nodes.Add(ParseBOOLEAN());
						return node;
					}
				case TokenType.INTEGER:
					{
						node.Nodes.Add(ParseINTEGER());
						return node;
					}
				case TokenType.FLOAT:
					{
						node.Nodes.Add(ParseFLOAT());
						return node;
					}
				case TokenType.CHARACTER:
					{
						node.Nodes.Add(ParseCHARACTER());
						return node;
					}
				case TokenType.STRING:
					{
						node.Nodes.Add(ParseSTRING());
						return node;
					}
				case TokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private Node ParseExpressionList()
		{
			Node node = new Node(NodeType.ExpressionList);

			switch (this._token.Type)
			{
				case TokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseExpression());
						node.Nodes.Add(ParseExpressionList());
						return node;
					}
				case TokenType.NEWLINE:
					{
						node.Nodes.Add(ParseInstructionEnd());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private Node ParseInstruction()
		{
			Node node = new Node(NodeType.Instruction);

			switch (this._token.Type)
			{
				case TokenType.IDENTIFIER:
					{
						node.Nodes.Add(ParseIDENTIFIER());
						node.Nodes.Add(ParseInstructionTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private Node ParseInstructionEnd()
		{
			Node node = new Node(NodeType.InstructionEnd);

			switch (this._token.Type)
			{
				case TokenType.NEWLINE:
					{
						node.Nodes.Add(ParseNEWLINE());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private Node ParseInstructionTail()
		{
			Node node = new Node(NodeType.InstructionTail);

			switch (this._token.Type)
			{
				case TokenType.BOOLEAN:
				case TokenType.CHARACTER:
				case TokenType.FLOAT:
				case TokenType.IDENTIFIER:
				case TokenType.INTEGER:
				case TokenType.STRING:
					{
						node.Nodes.Add(ParseExpression());
						node.Nodes.Add(ParseExpressionList());
						return node;
					}
				case TokenType.NEWLINE:
					{
						node.Nodes.Add(ParseInstructionEnd());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private Node ParseBOOLEAN()
		{
			Node node = new Node(NodeType.BOOLEAN, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private Node ParseCHARACTER()
		{
			Node node = new Node(NodeType.CHARACTER, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private Node ParseCOMMA()
		{
			Node node = new Node(NodeType.COMMA, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private Node ParseFLOAT()
		{
			Node node = new Node(NodeType.FLOAT, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private Node ParseIDENTIFIER()
		{
			Node node = new Node(NodeType.IDENTIFIER, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private Node ParseINTEGER()
		{
			Node node = new Node(NodeType.INTEGER, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private Node ParseNEWLINE()
		{
			Node node = new Node(NodeType.NEWLINE, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private Node ParseSTRING()
		{
			Node node = new Node(NodeType.STRING, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

	}
}
