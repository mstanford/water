//
// AUTOGENERATED 7/17/2009 5:09:41 PM
//
using System;

namespace Bamboo.Csv2
{
	public class CsvGenerator
	{

		public CsvGenerator()
		{
		}

		public void Generate(CsvNode node, System.IO.TextWriter writer)
		{
			bool writeWhitespace = false;

			Generate(node, writer, ref writeWhitespace);
		}

		private void Generate(CsvNode node, System.IO.TextWriter writer, ref bool writeWhitespace)
		{
			switch(node.Type)
			{
				case CsvNodeType.Cell:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CsvNodeType.CellList:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CsvNodeType.CellListTail:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CsvNodeType.Row:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CsvNodeType.RowEnd:
					{
						for(int i = 0; i < node.Nodes.Count; i++)
						{
							Generate(node.Nodes[i], writer, ref writeWhitespace);
						}
						break;
					}
				case CsvNodeType.BOOLEAN:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CsvNodeType.COMMA:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CsvNodeType.EOF:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CsvNodeType.EPSILON:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CsvNodeType.FLOAT:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CsvNodeType.INTEGER:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CsvNodeType.NEWLINE:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CsvNodeType.QUOTED_STRING:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				case CsvNodeType.STRING:
					{
						if(writeWhitespace)
						{
							writer.Write(" ");
						}
						writer.Write(node.Value);
						writeWhitespace = true;
						break;
					}
				default:
					{
						throw new System.Exception("Invalid node type.");
					}
			}
		}

	}
}
