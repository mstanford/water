//
// AUTOGENERATED 7/17/2009 5:09:41 PM
//
using System;

namespace Bamboo.Csv2
{
	public class CsvParser
	{
		private CsvTokenizer _tokenizer = new CsvTokenizer();
		private CsvTextReader _reader;
		private CsvToken _token;

		public CsvParser(CsvTextReader reader)
		{
			this._reader = reader;
			this._token = this._tokenizer.Tokenize(this._reader);
		}

		public CsvNode Parse()
		{
			return ParseRow();
		}

		private CsvNode ParseCell()
		{
			CsvNode node = new CsvNode(CsvNodeType.Cell);

			switch (this._token.Type)
			{
				case CsvTokenType.BOOLEAN:
					{
						node.Nodes.Add(ParseBOOLEAN());
						return node;
					}
				case CsvTokenType.INTEGER:
					{
						node.Nodes.Add(ParseINTEGER());
						return node;
					}
				case CsvTokenType.FLOAT:
					{
						node.Nodes.Add(ParseFLOAT());
						return node;
					}
				case CsvTokenType.STRING:
					{
						node.Nodes.Add(ParseSTRING());
						return node;
					}
				case CsvTokenType.QUOTED_STRING:
					{
						node.Nodes.Add(ParseQUOTED_STRING());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private CsvNode ParseCellList()
		{
			CsvNode node = new CsvNode(CsvNodeType.CellList);

			switch (this._token.Type)
			{
				case CsvTokenType.BOOLEAN:
				case CsvTokenType._EOF_:
				case CsvTokenType.FLOAT:
				case CsvTokenType.INTEGER:
				case CsvTokenType.NEWLINE:
				case CsvTokenType.QUOTED_STRING:
				case CsvTokenType.STRING:
					{
						node.Nodes.Add(ParseCell());
						node.Nodes.Add(ParseCellListTail());
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private CsvNode ParseCellListTail()
		{
			CsvNode node = new CsvNode(CsvNodeType.CellListTail);

			switch (this._token.Type)
			{
				case CsvTokenType.COMMA:
					{
						node.Nodes.Add(ParseCOMMA());
						node.Nodes.Add(ParseCell());
						node.Nodes.Add(ParseCellListTail());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private CsvNode ParseRow()
		{
			CsvNode node = new CsvNode(CsvNodeType.Row);

			switch (this._token.Type)
			{
				case CsvTokenType.BOOLEAN:
				case CsvTokenType.COMMA:
				case CsvTokenType.FLOAT:
				case CsvTokenType.INTEGER:
				case CsvTokenType.QUOTED_STRING:
				case CsvTokenType.STRING:
					{
						node.Nodes.Add(ParseCellList());
						node.Nodes.Add(ParseRowEnd());
						return node;
					}
				default:
					{
						return node;
					}
			}
		}

		private CsvNode ParseRowEnd()
		{
			CsvNode node = new CsvNode(CsvNodeType.RowEnd);

			switch (this._token.Type)
			{
				case CsvTokenType.NEWLINE:
					{
						node.Nodes.Add(ParseNEWLINE());
						return node;
					}
				case CsvTokenType._EOF_:
					{
						return node;
					}
				default:
					{
						throw new System.Exception("Syntax error.");
					}
			}
		}

		private CsvNode ParseBOOLEAN()
		{
			CsvNode node = new CsvNode(CsvNodeType.BOOLEAN, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CsvNode ParseCOMMA()
		{
			CsvNode node = new CsvNode(CsvNodeType.COMMA, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CsvNode ParseEOF()
		{
			CsvNode node = new CsvNode(CsvNodeType.EOF, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CsvNode ParseFLOAT()
		{
			CsvNode node = new CsvNode(CsvNodeType.FLOAT, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CsvNode ParseINTEGER()
		{
			CsvNode node = new CsvNode(CsvNodeType.INTEGER, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CsvNode ParseNEWLINE()
		{
			CsvNode node = new CsvNode(CsvNodeType.NEWLINE, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CsvNode ParseQUOTED_STRING()
		{
			CsvNode node = new CsvNode(CsvNodeType.QUOTED_STRING, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

		private CsvNode ParseSTRING()
		{
			CsvNode node = new CsvNode(CsvNodeType.STRING, this._token.Value);
			this._token = this._tokenizer.Tokenize(this._reader);
			return node;
		}

	}
}
